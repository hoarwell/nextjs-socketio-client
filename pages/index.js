import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useState, useEffect, useRef } from "react";

const { io } = require("socket.io-client");
const SERVER_URL = "https://socketio-nextjs-server.herokuapp.com";
const socket = io(`${SERVER_URL}`);

export default function Home() {
  const [user, setUser] = useState("");
  const [users, setUsers] = useState([]);
  const [error, setError] = useState("");
  const [message, setMessage] = useState({});
  const [messages, setMessages] = useState([]);
  const [typing, setTyping] = useState("");
  const [mouse, setMouse] = useState("");

  const inputRef = useRef();

  const handleChange = (e) => {
    const data = { user: user, time: Date.now(), text: e.target.value };
    setMessage(data);
    socket.emit("typing", user);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    await socket.emit("send-message", message);
    await socket.emit("cancel-typing", user);
    inputRef.current.value = "";
  };

  const handleFocus = (e) => {
    e.preventDefault();
    socket.emit("typing", user);
  };

  const handleBlur = (e) => {
    e.preventDefault();
    socket.emit("cancel-typing", user);
    setTyping("");
  };

  const connect = () => {
    setUser(socket.id);
    socket.emit("connected", { id: socket.id, joined: Date.now() });
  };

  const disconnect = () => {
    socket.emit("disconnect", socket.id);
  };

  const getUsers = (users) => {
    setUsers((prev) => users);
  };

  const connectError = (error) => setError(error.message);

  const receiveMessage = (message) => {
    setMessages((prev) => [...prev, message]);
  };

  const receiveTyping = (user) => {
    if (user) setTyping((prev) => user);
    else setTyping("");
  };

  const receiveCancelTyping = () => setTyping("");

  const getMousePosition = (e) => {
    socket.emit("send-mouse", {
      user: user,
      time: Date.now(),
      position: { x: e.clientX, y: e.clientY },
    });
  };

  const receiveMouse = (mouse) => setMouse((prev) => mouse);

  useEffect(() => {
    socket.on("connect", connect);
    socket.on("disconnect", disconnect);
    socket.on("connect-error", connectError);
    socket.on("get-users", getUsers);
    socket.on("receive-typing", receiveTyping);
    socket.on("receive-cancel-typing", receiveCancelTyping);
    socket.on("receive-mouse", receiveMouse);
    socket.on("receive-message", receiveMessage);
    return () => socket.removeAllListeners();
  }, [socket]);

  useEffect(() => {
    window.addEventListener("mousemove", getMousePosition);
    return () => window.removeEventListener("mousemove", getMousePosition);
  }, [mouse]);

  return (
    <div>
      <Head>
        <title>chat</title>
        <meta name="description" content="ㅇGenerated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {error && !user ? <p>connection error.. *{error}</p> : ""}
        {user ? <p>you: {user}</p> : ""}
        <ul>
          <p>Users</p>
          {users.map((user, i) => (
            <li key={i}>
              <p>{user.id}</p>
            </li>
          ))}
        </ul>
        <ul>
          {messages.map((msg, i) => (
            <li key={i}>
              <p>{msg.user === user ? "나" : user + "님"}</p>
              <p>{msg.text}</p>
              <p>{new Date(msg.time).toLocaleTimeString()}</p>
            </li>
          ))}
        </ul>
        {typing !== "" && typing !== user && <p>{typing} typing...</p>}
        <form onSubmit={handleSubmit}>
          <input
            type="text"
            onFocus={handleFocus}
            onBlur={handleBlur}
            onChange={handleChange}
            ref={inputRef}
          />
          <input type="submit" value="send" />
        </form>
        <div className="pill-container">
          <img src="./pill.png" />
        </div>
      </main>
      <style jsx>{`
        .pill-container {
          width: 50px;
          position: absolute;
          top: 0;
          left: 0;
          transform: translate(
            ${mouse ? mouse.position.x - 10 : 0}px,
            ${mouse ? mouse.position.y + 30 : 0}px
          );
        }
        .pill-container img {
          width: 100%;
        }
      `}</style>
    </div>
  );
}
